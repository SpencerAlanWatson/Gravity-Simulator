<html>
    <head> 
        
    </head>
<body>
<script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js"></script>

<script>

    /**
     * A 2D Point
     * @constructor
     * @param   {Number} x The X Coordinate
     * @param   {Number} y The Y Coordinate
     */
    function Point(x, y) {
        if (!(this instanceof Point)) {
            return new Point(x, y);
        }
        var self = this;
        /**
         *@property x
         *@type {Number}
         *@default 0
         */

        this.x = !isFinite(x) ? 0 : x;
        /**
         *@property x
         *@type {Number}
         *@default 0
         */
        this.y = !isFinite(y) ? 0 : y;

        if (!y) {
            this.y = this.x;
        }



    }

    /**
     * String represenation of the Point
     * @returns {String}
     */
    Point.prototype.toString = function () {
        return this.x + ", " + this.y;
    };
    /**
     * Adds two points togehter
     * @param {Point} Point The Point to add
     */
    Point.prototype.addPoint = function (Point) {
        this.x += Point.x;
        this.y += Point.y;
        return this;
    };
    Point.prototype.addX = function (x) {
        this.x += x;
        return this;
    };
    Point.prototype.addY = function (y) {
        this.y += y;
        return this;
    };
    Point.prototype.addXY = function (x, y) {
        this.x += x;
        this.y += y;
        return this;
    };
    /**
     * Gets the distance to another point.
     * @param   {Point} otherPoint The Point to find the distance between
     * @returns {Number} The Distance
     */
    Point.prototype.getDistanceTo = function (otherPoint) {
        return Math.sqrt(Math.pow(this.x - otherPoint.x, 2) + Math.pow(this.y - otherPoint.y, 2));
    };
    Point.prototype.getDistanceToSquared = function (otherPoint) {
        return Math.pow(this.x - otherPoint.x, 2) + Math.pow(this.y - otherPoint.y, 2);
    }
    Point.prototype.getNormals = function (other) {
        var dx = other.x - this.x,
            dy = other.y - this.y;
        return [new Point(-dy, dx), new Point(dy, -dx)];
    }
    Point.prototype.getSlope = function (otherPoint) {
        return (otherPoint.y - this.y) / (otherPoint.x - this.x);
    }
    Point.prototype.crossProduct = function (b) {
        return (this.x * b.y) - (this.y * b.x);
        //return (c.y - this.y) * (b.x - this.x) - (c.x - this.x) * (b.y - this.y);
    }
    Point.prototype.dotProduct = function (b) {
        return (this.x * b.x) + (this.y * b.y);
        //return (c.x - this.x) * (b.x - this.x) + (c.y - this.y) * (b.y - this.y);
    }
    Point.prototype.getMidPoint = function(otherPoint) {
        return new Point((this.x + otherPoint.x) /2, (this.y + otherPoint.y) /2);
    }
    Point.prototype.isBetween = function (b, c) {
        crossproduct = this.crossProduct(b, c);
        if (Math.abs(crossproduct) != 0)
            return false; //(or != 0if using integers)

        dotproduct = this.dotProduct(b, c);
        if (dotproduct < 0)
            return false;

        squaredlengthba = this.getDistanceToSquared(b);
        if (dotproduct > squaredlengthba)
            return false;

        return true;
    }
    Point.prototype.deltaPoint = function (otherPoint) {
        return new Point(otherPoint.x - this.x, otherPoint.y - this.y);
    };
    /**
     * Finds the angle between this and another point
     * @param   {Point}   otherPoint
     * @returns {Number} The Angle in Radians
     */
    Point.prototype.angleBetween = function (otherPoint) {
        var dx = otherPoint.x - this.x,
            dy = otherPoint.y - this.y;
        return Math.atan2(dy, dx);
    };

    Point.prototype.inverseAngleBetween = function (otherPoint) {
        var dx = this.x - otherPoint.x,
            dy = this.y - otherPoint.y;
        return Math.atan2(dx, dy);
    };
    Point.prototype.getUnitVector = function() {
        var angBet = new Point().angleBetween(this);
        return new Point(Math.cos(angBet), Math.sin(angBet));
    };
    Point.prototype.mult = function (val) {
        this.x *= val;
        this.y *= val;
        return this;
    };

    Point.prototype.clone = function () {
        return new Point(this.x, this.y);
    };
    

var Tao = 2 * Math.PI;


    function Object(position, mass, startingVelocity) {
        var self = this;
        if (!(this instanceof Object)) {
            return new Object(position, mass, startingVelocity);
        }
        this.mass = Math.abs(mass) || 1;
        this.size = Math.log(this.mass);
        this.position = position;
        this.lastPosition = new Point(position.x, position.y);
        //this.hitArea = new Rectangle(position.x, position.y, this.size, this.size);

        //this.velocity = startingVelocity || new Point();
        //this.momentum = this.velocity.clone().mult(this.mass);
        //this.forceVector = new Point();
        //this.accleration = new Point();

        //ForceObj.forceEmitter.on('applyForce', _.bind(this.applyForce, this));
    }

    function toPixels(meterDistance) {
        var conversionRatio = 1000;
        if (meterDistance instanceof Point) {
            return new Point(meterDistance.x / conversionRatio, meterDistance.y / conversionRatio);
        }
        return meterDistance / conversionRatio;
    }
    Object.prototype.Clear = function (ctx) {
        var offset = 1.5,
            gPos = this.lastPosition,
            gSizeX = this.size + offset,
            gSizeY = this.size + offset;
        ctx.clearRect(gPos.x - offset /2, gPos.y - offset /2, gSizeX, gSizeY);
    }
    Object.prototype.Draw = function (ctx) {
        //Converting meters to kilometers, because the distances are much to vast.
        var gPos = this.position,
            gSize = this.size;
        ctx.rect(gPos.x, gPos.y, gSize, gSize);
    };
    Object.prototype.testCollision = function (otherObject, perSec) {
        var vel = this.velocity.clone().addPoint(this.accleration.clone().mult(perSec)),
            ovel = otherObject.velocity.clone().addPoint(otherObject.accleration.clone().mult(perSec)),
            size = this.size,
            osize = otherObject.size,
            fullWidth = this.size + vel.x,
            fullHeight = this.size + vel.y,
            p1 = this.position.clone(), //6
            p2 = this.position.clone().addPoint(vel),
            p3 = p1.clone(), //new Point(),
            p4 = p2.clone(), //new Point();
            op3 = otherObject.position.clone(),
            op4 = otherObject.position.clone().addPoint(ovel);
        /*if (p1.x <= p2.x) {
            p3.x = p1.x;
            p4.x = p2.x;
        } else {
            p3.x = p2.x;
            p4.x = p1.x;
        }
        if (p1.y <= p2.y) {
            p3.y = p1.y;
            p4.y = p2.y;
        } else {
            p3.y = p2.y;
            p4.y = p1.y;
        }*/

        if (false && (p3.x === p4.x || p3.y === p4.y)) {
            var hitArea = new Rectangle(p3.x, p3.y, (p3.x - p4.x) + this.size, (p3.y - p4.y) + this.size);
            if (hitArea.containsRect(otherObject.hitArea)) {
                console.info('Collision!', window.performance.now(), this, otherObject);
            }
        } else {
            //y = mx + i
            //x = (y - i)/m
            /*ar slope = p3.getSlope(p4),
                yi = (slope * (-p3.x)) + p3.y,
                ox1 = otherObject.position.x,
                oy1 = otherObject.position.y,
                ox2 = otherObject.position.x + otherObject.size,
                oy2 = otherObject.position.y + otherObject.size,
                ex1 = slope * ox1 + yi,
                ey1 = (oy1 - yi) / slope,
                ex2 = slope * ox2 + yi,
                ey2 = (oy2 - yi) / slope,
                s1 = p3.y >= ex1,
                s2 = p4.y <= ex1,
                s3 = p3.x >= ey1,
                s4 = p4.x <= ey1,
                
                s5 = p3.y >= ex2,
                s6 = p4.y <= ex2,
                s7 = p3.x >= ey2,
                s8 = p4.x <= ey2,
                
                sx1 = s1 && s2,
                sy1 = s3 && s4,
                sx2 = s5 && s6,
                sy2 = s7 && s8;
                    
            if((sx1 || sx2) && (sy1 || sy2)) {
                debugger;
            }*/
            /*var oop = otherObject.position.clone(),
                oop2 = otherObject.position.clone().addXY(otherObject.size, otherObject.size),
                mp = p4.clone().addXY(this.size, this.size),
                isBetween = p3.isBetween(mp, oop),
                isBetween2 = p3.isBetween(mp, oop2),
                oBetween = p3.isBetween(oop, p4),
                oBetween2 = p3.isBetween(oop2, p4);
            if (isBetween || isBetween2 || oBetween || oBetween2) {
                debugger;
            }*/
            var halfSize1 = this.size / 2,
                op = p4.clone().addXY(this.size, this.size),
                center1 = p3.getMidPoint(op),
                center2 = otherObject.position.clone().addXY(otherObject.size / 2, otherObject.size / 2),
                axis = center1.getUnitVector(),

                o1p = [
                    p3,
                    Point(p3.x + this.size, p3.y),
                    Point(p4.x + this.size, p4.y),
                    Point(p4.x + this.size, p4.y + this.size),
                    Point(p4.x, p4.y + this.size),
                    Point(p3.x, p3.y + this.size)
                ],
                o2p = [
                    op3,
                    Point(op3.x + osize, op3.y),
                    Point(op4.x + osize, op4.y),
                    Point(op4.x + osize, op4.y + osize),
                    Point(op4.x, op4.y + osize),
                    Point(op3.x, op3.y + osize)
                ],
                /*[
                    otherObject.position
                    Point(otherObject.position.x + otherObject.size, otherObject.position.y),
                    Point(otherObject.position.x + otherObject.size, otherObject.position.y + otherObject.size),
                    Point(otherObject.position.x, otherObject.position.y + otherObject.size)
                ],*/
                normals = [];

            function getNormals(List, array) {
                for (var i = 0, length = List.length - 1; i < length; i++) {
                    var norms = List[i].getNormals(List[i + 1]);
                    array.push(norms[0]); //We use the left hand side normal.
                }
                array.push(List[length].getNormals(List[0])[0]);

            }

            function minMaxProjections(List, Axis) {
                var projections = {
                    min: Infinity,
                    max: -Infinity
                }
                _.each(List, function (point) {
                    var currProjection = point.dotProduct(Axis);
                    //select the minimum projection on axis to corresponding box corners
                    if (projections.min > currProjection) {
                        projections.min = currProjection;
                    }
                    //select the maximum projection on axis to corresponding box corners
                    if (currProjection > projections.max) {
                        projections.max = currProjection;
                    }
                });
                return projections;
            };
            /*var ctx = document.getElementById('canvas').getContext('2d');
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#00ff00";

            ctx.strokeRect(p3.x, p3.y, this.size, this.size);

            ctx.strokeStyle = "#0000FF";
            ctx.strokeRect(p4.x, p4.y, this.size, this.size);

            ctx.strokeStyle = "#FF0000";
            DrawLines(ctx, o1p);

            DrawLines(ctx, o2p);
            ctx.strokeStyle = "#000000";*/

            //D
            getNormals(o1p, normals);
            getNormals(o2p, normals);
            var o1projs = [],
                o2projs = [];
            var isColliding = !_.find(normals, function (normal) {
                var normalUnitVector = normal, //.getUnitVector(),
                    o1Projections = minMaxProjections(o1p, normalUnitVector),
                    o2Projections = minMaxProjections(o2p, normalUnitVector),
                    isSeparated = o2Projections.max < o1Projections.min || o1Projections.max < o2Projections.min;
                o1projs.push(o1Projections);
                o2projs.push(o2Projections);
                return isSeparated;
            });

            /*var c = new Point(center2.x - center1.x, center2.y - center1.y),
                a = new Point(op.x - center1.x, op.y - center1.y),
                b = new Point(otherObject.position.x - center2.x, otherObject.position.y - center2.y),
                projC = c.dotProduct(axis),
                projA = a.dotProduct(axis),
                projB = b.dotProduct(axis),
                gap = projC - projA + projB;*/

            if (isColliding) {
                var velocityChange1 = new Point((-otherObject.momentum.x) / this.mass, (-otherObject.momentum.y) / this.mass),
                    velocityChange2 = new Point((-this.momentum.x) / otherObject.mass, (-this.momentum.y) / otherObject.mass);
                otherObject.addForce(vel.clone().mult(this.mass));
                this.addForce(ovel.clone().mult(otherObject.mass));
                console.group('Collision Velocity Change');
                console.log(velocityChange1.toString())
                console.log(velocityChange2.toString());
                console.groupEnd();
            }

            return isColliding;
            dum = "no";
        }
        return false;

    };

    Object.prototype.addForce = function (force, angle) {
        if (this.mass >= 0) {
            //If angle wasn't sent in, then we assume that force is a vector
            var fv = angle ? ForceObj.forceToForceVector(force, angle) : force;
            this.forceVector.addPoint(fv)
            this.accleration.addPoint(new Point(fv.x / this.mass, fv.y / this.mass));
        }
    };
    Object.prototype.applyForce = function (forceEvent) {
        var perSec = forceEvent.perSec;
        this.lastPosition = this.position.clone();
        this.velocity.addPoint(this.accleration.mult(perSec));
        this.momentum = this.velocity.clone().mult(this.mass);
        this.position.addPoint(this.velocity);

        this.forceVector = new Point();
        this.accleration = new Point();
    };
    var tickLast,
        ctx,
        animId,
        canvasTranslate = new Point(0, 0);

    window.beforeForce = true;


    function drawCanvas(ctx, List) {
        ctx.fillStyle = "rgba(0, 0, 0, 1)";
        var first = true;
        _.each(List, function (object) {
            ctx.beginPath();

            object.Draw(ctx);
            ctx.fill();

            /*if (first) {
            first = false;
            ctx.moveTo(object.position.x, object.position.y);
        } else {
            ctx.lineTo(object.position.x, object.position.y);
        }*/

        });

    }

    function GraphicsLoop(tickNow) {
        animId = requestAnimationFrame(GraphicsLoop);
        var tickDelta = tickNow - tickLast;
        if (!tickLast) {
            tickDelta = 0;
        }
        clearCanvas(ctx, Objects);
        if (window.beforeForce) {
            drawCanvas(ctx, Objects);
            //ForceObj.ForceLoop(Objects, tickDelta);
        } else {
            //ForceObj.ForceLoop(Objects, tickDelta);

            drawCanvas(ctx, Objects);
        }
        tickLast = tickNow;

    }

    function DrawLines(ctx, points) {
        ctx.moveTo(points[0].x, points[0].y);
        for (var i = 1, length = points.length; i < length; i++) {
            ctx.lineTo(points[i].x, points[i].y);
        }
        ctx.lineTo(points[0].x, points[0].y);
        ctx.stroke();
    }
    window.DrawLines = DrawLines;

    function Start(context) {
        animId = requestAnimationFrame(GraphicsLoop);
        ctx = context;
    }

    function Stop() {
        cancelAnimationFrame(animId);
        tickLast = null;
    }
    function clearCanvasO2(ctx, List) {
for(var i = 0, len = List.length; i < len; ++i) {
            List[i].Clear(ctx);
        }
    }
function clearCanvasO1(ctx, List) {
        _.each(List, function(object) {
            object.Clear(ctx);
        });
}
function clearCanvasF1(ctx, List) {
        ctx.clearRect(0, 0, canvasSize.x, canvasSize.y );
}
</script>
<canvas id="canvas" width="500" height="500"></canvas>

<script>
var canvas = document.getElementById('canvas'),
canvasContext = canvas.getContext('2d');
var canvasSize = new Point(canvas.width, canvas.height);
var Objects = [],
Mass = 20000,
SizeLog = Math.log(Mass),
cur = 0, max = 1000,
emptyPoint = new Point();
for(; cur < max; ++cur) 
{
   Objects.push(new Object(new Point(SizeLog * cur, SizeLog * cur), Mass, emptyPoint);
}
</script>
</body>
</html>